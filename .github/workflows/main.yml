name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Print .NET SDK version
      run: dotnet --version

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Install modules
      run: yarn --prefer-offline

    - name: Test and generate coverage report
      run: |
        dotnet test --configuration Release --no-build Utils.Test/Utils.Test.csproj /p:CollectCoverage=true /p:CoverletOutputFormat="opencover" --verbosity normal
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator "-reports:Utils.Test/coverage.opencover.xml" "-targetdir:./coverage/" "-reporttypes:Badges;Html;TextSummary"

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
          path: './coverage/'
          
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1

    - name: Extract Coverage Percentage
      run: |
        # Find the line containing coverage percentage in summary.txt and extract the percentage value
        COVERAGE_PERCENTAGE=$(grep 'Line coverage' ./coverage/Summary.txt | awk -F ': ' '{print $2}')
        echo "Coverage Percentage: $COVERAGE_PERCENTAGE"
        
    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ./Utils.Test/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'
            
    - name: Create Test Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: ./Utils.Test/coverage.opencover.xml
        gist-filename: code-coverage.json
        gist-id: b2cc567853da1a12d934884d7da21e43
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       
    - name: Print code coverage
      run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"
      
    - name: Print badge data
      run: echo "Badge data ${{steps.test_step.outputs.badge}}"

    - name: Nuget set access
      if: github.ref == 'refs/heads/main'    
      run: dotnet nuget add source --username ${{ github.actor }} --password ${{ github.token }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/garethbirduk/index.json"

    - name: Nuget deploy Package
      if: github.ref == 'refs/heads/main'
      run: dotnet nuget push ./Utils/bin/Release/**/*.nupkg --source "github" --api-key ${{ secrets.GH_APIKEY }}


            